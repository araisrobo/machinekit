component servo_tick        "for every servo period, send a tick message to ring buffer";
pin out u32 tick            "number of tick messages written";
pin out u32 overrun         "number of failed write attempts";
pin in  float j0_pos_cmd    "motor position of Joint.0";
pin in  float j1_pos_cmd    "motor position of Joint.1";
pin in  float j2_pos_cmd    "motor position of Joint.2";
pin in  float j3_pos_cmd    "motor position of Joint.3";
pin in  float j4_pos_cmd    "motor position of Joint.4";
pin in  float j5_pos_cmd    "motor position of Joint.5";
pin in  bit  update_pos_ack "the ACK, which means joint postion is updated";
pin in  bit  amp_enable     "amplifier enable signal";

function _;

option singleton yes;
option rtapi_app no;

license "GPLv2 or later";
;;

#include "hal_priv.h"
#include "hal_ring.h"	        /* ringbuffer declarations */
#include "tick_jcmd.h"

static char *ring = "ring_0";
RTAPI_MP_STRING(ring,  "name of ring to attach");

static ringbuffer_t rb;
static char *name = "servo_tick";

FUNCTION(_) {

    tick_jcmd_t *tick_jcmd;
    int retval;

    // preallocate memory in ringbuffer
    retval = record_write_begin(&rb, (void **)&tick_jcmd, sizeof(tick_jcmd_t));
    if (retval != 0) {
        rtapi_print_msg(RTAPI_MSG_ERR,
                        "%s: RB_RESERVE_FAIL: record_write_begin(%zu) failed: %d\n",
                        name, sizeof(tick_jcmd_t), retval);
        overrun++;
        return;
    }

    // zero-copy tick_jcmd directly into ringbuffer
    tick_jcmd->_tick = tick;
    tick_jcmd->pos_cmd[0] = j0_pos_cmd;
    tick_jcmd->pos_cmd[1] = j1_pos_cmd;
    tick_jcmd->pos_cmd[2] = j2_pos_cmd;
    tick_jcmd->pos_cmd[3] = j3_pos_cmd;
    tick_jcmd->pos_cmd[4] = j4_pos_cmd;
    tick_jcmd->pos_cmd[5] = j5_pos_cmd;

    // pack bit-mapping signals into cmd
    tick_jcmd->cmd =
            (amp_enable << TICK_AMP_ENABLE) |
            (update_pos_ack << TICK_UPDATE_POS_ACK);

    tick++;

    // send it off
    retval = record_write_end(&rb, tick_jcmd, sizeof(tick_jcmd_t));
    if (retval) {
        rtapi_print_msg(RTAPI_MSG_ERR,
                        "%s: RB_WRITE_FAIL: record_write_end(%d) failed: %d\n",
                        name,  sizeof(tick_jcmd_t), retval);
        overrun++;
        return;
    }
}

int rtapi_app_main(void)
{
    int retval;

    comp_id = hal_init(name);
    if (comp_id < 0) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_init() failed: %d\n",
			name, comp_id);
	return -1;
    }

    if ((retval = hal_ring_attach(ring, &rb, NULL))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_attach(%s) failed: %d\n",
			name, ring, retval);
	return -1;
    }

    if (rb.header->type != RINGTYPE_RECORD) {
        rtapi_print_msg(RTAPI_MSG_ERR,
                        "%s: ERROR: ring buffer type is (%d), should be RINGTYPE_RECORD(0)\n", name, rb.header->type);
        return -1;
    }

    rb.header->writer = comp_id;
    rb.header->writer_instance = rtapi_instance;
    if ((retval = export(name, 0))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: export(%s) failed: %d\n",
			name, name, retval);
	return -1;
    }
    hal_ready(comp_id);
    rtapi_print_msg(RTAPI_MSG_ERR,
		    "%s: attached to %s reader=%d writer=%d\n",
		    name, ring, rb.header->reader, rb.header->writer);

    return 0;
}

void rtapi_app_exit(void)
{
    int retval;
    rb.header->writer = 0;
    if ((retval = hal_ring_detach(ring, &rb)) < 0)
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_detach(%s) failed: %d\n",
			name, ring, retval);
    hal_exit(comp_id);
}
