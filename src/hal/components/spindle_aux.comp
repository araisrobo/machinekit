/**
 * Reference: Comp HAL Component Generator
 * http://linuxcnc.org/docs/html/hal/comp.html
 **/

component spindle_aux "Spindle with pulse command interface";

pin in float velocity-cmd = 0 "spindle speed command (rps)";
pin in float css-error-velocity-cmd = 0 "Const Surface Speed Commanded(rps*radius)";
pin in float aux-radius = 0 "aux-radius";

pin in float feedback-vel = 0 "Feedback velocity based on spindle encoder (rps)";
pin in float css-factor = 0 "CSS(non-0) or CONST-RPM(0)";
pin in bit on = 0 "Spindle on";

pin out bit at-speed "Set when spindle is at speed for velocity-mode";
pin out float vel-req = 0 "velocity request (rps)";
pin out float curr-pos = 0 "Feedback position, in revolutions";
pin out float curr-vel = 0 "Current velocity (rps)";
pin out float speed-rpm = 0 "Current speed in RPM";
param rw float max-vel = 0 "Max velocity";
param rw float max-acc = 0 "Max acceleration";
param rw float max-jerk = 0 "Max jerk";
param rw float at-speed-range = 0 "At speed range (0.0(0%) ~ 1.0(100%)); the less the more accurate";

/*
param   rw  float   scale = 1.0
"""factor applied to \\fBvelocity-cmd\\fP.

The result of '\\fBvelocity-cmd\\fP * \\fBscale\\fP' be in revolutions per second.
For example, if \\fBvelocity-cmd\\fP is in revolutions/minute, \\fBscale\\fP should be set to 1/60 or 0.016666667.
""";
*/

license "GPL";

function _ fp;

;;

#include <stdio.h>
#include <assert.h>
#include <rtapi_math.h>
#include <posemath.h>

typedef enum {
    S_IDLE,
    S_VEL_MODE,
    S_VEL_DECEL,
} spindle_state_t;


/**
 * vel_ctrl: Velocity Control
 *           Algorithm is taking from simple_tp.c
 **/
static double vel_ctrl(double vel_cmd, double period, double maxJerk, double maxAcc)
{
    double max_da, tiny_dv, vel_err, acc_req;
    static double curr_acc = 0; // global signal
    static double currVel = 0; // global signal

    // rtapi_print_msg (RTAPI_MSG_DBG, "maxJerk(%f)", maxJerk);
    max_da = maxJerk * period;
    tiny_dv = max_da * period * 0.001;

    /* calculate desired acceleration */

    /* request a acceleration that tends to drive
       vel_err to zero, but allows for stopping without velocity
       overshoot */
    vel_err = vel_cmd - currVel;
    /* positive and negative errors require some sign flipping to
       avoid sqrt(negative) */
    if (vel_err > tiny_dv) {
	acc_req = -max_da +
	    rtapi_sqrt(2.0 * maxJerk * vel_err + max_da * max_da);
    } else if (vel_err < -tiny_dv) {
	acc_req = max_da -
	    rtapi_sqrt(-2.0 * maxJerk * vel_err + max_da * max_da);
    } else {
	/* within 'tiny_dv' of desired vel, no need to accel */
	acc_req = 0;
	currVel = vel_cmd;
    }

    /* limit acceleration request */
    if (acc_req > maxAcc) {
	acc_req = maxAcc;
    } else if (acc_req < -maxAcc) {
	acc_req = -maxAcc;
    }

    /* ramp acceleration toward request at jerk limit */
    if (acc_req > (curr_acc + max_da)) {
	curr_acc += max_da;
    } else if (acc_req < (curr_acc - max_da)) {
	curr_acc -= max_da;
    } else {
	curr_acc = acc_req;
    }

    /* integrate acceleration to get new velocity */
    currVel += curr_acc * period;
    
    // rtapi_print_msg (RTAPI_MSG_DBG, "currVel(%f)", currVel);
    return currVel;
}


FUNCTION(_)
{
    static spindle_state_t cur_state = S_IDLE;
    
    // rtapi_print_msg (RTAPI_MSG_DBG, "cur_state(%d)", cur_state);

    if ((!on) && (curr_vel == 0)) {
	cur_state = S_IDLE;
    }

    switch (cur_state) {
    case S_IDLE:
        curr_vel = 0;
        if (on) {
            cur_state = S_VEL_MODE;
        }
        break;

    case S_VEL_MODE:
        if (css_factor != 0) {
            vel_req = css_error_velocity_cmd / aux_radius;
        } else {
            vel_req = velocity_cmd;
        }
        /* limit velocity request */
        if (vel_req > max_vel) {
            vel_req = max_vel;
        } else if (vel_req < -max_vel) {
            vel_req = -max_vel;
        }
        curr_vel = vel_ctrl(vel_req, fperiod, max_jerk, max_acc);
        curr_pos += curr_vel * fperiod;
        if (!on) {
            cur_state = S_VEL_DECEL;
        }
        break;

    case S_VEL_DECEL:
        // decel to vel == 0
        vel_req = 0;
        curr_vel = vel_ctrl(vel_req, fperiod, max_jerk, max_acc);
        curr_pos += curr_vel * fperiod;
        if (curr_vel == 0) {
            cur_state = S_IDLE;
        } else if (on) {
            cur_state = S_VEL_MODE;
        }
        break;

    default:
        assert(0);
        break;
    }

    if (vel_req == 0)
    {
        if (rtapi_fabs(feedback_vel) <= at_speed_range) {
            at_speed = 1;
        } else {
            at_speed = 0;
        }
    } else {
        if ((rtapi_fabs(1 - feedback_vel/vel_req)) <= at_speed_range) {
            at_speed = 1;
        } else {
            at_speed = 0;
        }
    }

    if (!on)
    {
        at_speed = 0;
    }

    speed_rpm = curr_vel * 60.0;
}
