/******************************************************************************
 *
 * Copyright (C) 2014 Charles Steinkuehler (charles AT steinkuehler DOT net)
 * Modified 2015 by Alexander Roessler (mail AT roessler DOT systems)
 *
 *
 * This module allows multiple drive motors (joints) to be connected to a
 * single motion axis.  This is useful for gantry style machines if you don't
 * want to use gantrykins
 *
 ******************************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * THE AUTHORS OF THIS PROGRAM ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the Machinkit project.  For more
 * information, go to www.machinekit.io
 *
 ******************************************************************************/

component rgantry "Machinekit HAL component for driving multiple joints from a single axis";
pin out float joint.##.pos-cmd      [pincount] "Per-joint commanded position";
pin in  float joint.##.pos-fb       [pincount] "Per-joint position feedback";
pin in  bit   joint.##.home-sw-i    [pincount] "Per-joint home switch";
pin in  float joint.##.home-offset  [pincount] "Per-joint home offset for fine tuning";
pin out float joint.##.offset       [pincount] "(debugging) Per-joint offset value, updated when homing";
pin in  float position-cmd "Commanded position from motion";
pin out float position-fb "Position feedback to motion";
pin in  bit   homing "Axis homing state from motion";
pin out bit   home "Combined home signal, true if all joint home inputs are true";
pin out bit   limit "Combined limit signal, true if any joint home input is true";
pin in  float search-vel "HOME_SEARCH_VEL from ini file";

pin in  bit   update-pos-ack-i "the ACK signal of updating joint position";
pin in  s32   risc-probe-type-i "risc-probe-type from usb_homing.c";
pin in  float risc-probe-vel-i "risc-probe-vel from usb_homing.c";
pin in  s32   joint.##.home-sw-id [pincount] "Per-joint home switch gpio-id for RISC probing";
pin out s32   joint.##.risc-probe-pin-o [pincount] "Per-joint pin-id for RISC-PROBE command"; /* based on home-sw-id and risc-probe-type */
pin out s32   joint.##.risc-probe-type-o [pincount] "Per-joint RISC-PROBE-TYPE";
pin out float joint.##.risc-probe-vel-o [pincount] "Per-joint RISC-PROBE-VEL";

function read  fp "Update position-fb and home/limit outputs based on joint values";
function write fp "Update joint pos-cmd outputs based on position-cmd in";

variable hal_bit_t   tmp_home = 0;
variable hal_float_t offset[pincount] = 0.0;
variable hal_float_t prev_cmd = 0.0;
variable hal_s32_t   fb_joint = 0;
variable hal_s32_t   prev_home[pincount] = 0;
variable hal_s32_t   curr_home[pincount] = 0;
variable hal_float_t pos_fb_target[pincount] = 0.0;

description """
Drives multiple physical motors (joints) from a single axis input
.LP
The `pincount' value is the number of joints to control.  Two is typical, but
up to seven is supported (a three joint setup has been tested with hardware).
.LP
All controlled joints track the commanded position (with a per-joint offset)
unless in the process of latching.  Latching is when the commanded position is
moving away the from the homing switches (as determined by the sign of search-vel),
the joint home switches are not all in the same state and homing is active.  When the system is
latching and a joint home switch deactivates, the command value sent to that joint
is "frozen" and the joint offset value is updated instead.  Once all home
switches are deactivated, there are no more adjustments made to the offset values
and all joints run in lock-step once more.
.LP
For best results, set HOME_SEARCH_VEL and HOME_LATCH_VEL to the opposite direction
and as slow as practical.  When a joint home switch trips, the commanded
velocity will drop immediately from HOME_SEARCH_VEL to zero, with no limit on
accleration.
.LP
The latching gantry component is the opposite of the normal gantry component. It
makes sense to use it with home switches that have a reproduceable deactivation hysteresis.
.LP
Using the per joint home-offset input it is possible add a small offset when latching.
This makes it possible to adjust small differences in the endstop positions of the gantry setup.
.LP
The homing input must be connected to the axis homing output motion in order to enable
the gantry component. When the axis is not homing latching will not be activated.
""";
license "GPL";

instanceparam int pincount = 7;

option MAXCOUNT 7;

;;

#ifdef USB_MOTION_ENABLE        /* enable usb motion device */
#include "sync_cmd.h"
#else
#define RISC_PROBE_LOW 0
#define RISC_PROBE_HIGH 1
#endif

FUNCTION(read)
{
    hal_s32_t i;
        
    if ((homing == 0) || (risc_probe_vel_i ==0)) {
        // use master joint status as 
        home = joint_home_sw_i(0);
    } else {
        // scan all joints for home value
        for (i = 0; i < localpincount; i++) {
            if (risc_probe_type_i == RISC_PROBE_HIGH) {
                /**
                 * 及仁的 HOME SWITCH 是 LOW ACTIVE, 
                 * RISC_PROBE_HIGH 意味著目前電壓是 LOW, 要找鑾成 HIGH 的位置
                 * 電壓是 LOW 的 joint_home_sw_i(i) 的值是 TRUE，
                 * 要等每一軸的 joint_home_sw_i(i) 都鑾成 FALSE 
                 */ 
                home |= joint_home_sw_i(i);
            } else if (risc_probe_type_i == RISC_PROBE_LOW) {
                // 等每一軸的 joint_home_sw_i(i) 都鑾成 TRUE
                home &= joint_home_sw_i(i);
            }
        }
    }

    position_fb = joint_pos_fb(0);

return 0;
}

FUNCTION(write)
{
    hal_s32_t i;

    if (update_pos_ack_i)
    {
        // update joint offset value against master joint
        for (i = 0; i < localpincount; i++) {
            offset[i] = joint_pos_fb(0) - joint_pos_fb(i);
        }
    }

    // Update each joint's commanded position
    for (i = 0; i < localpincount; i++) {
        if (risc_probe_vel_i == 0) {
            joint_pos_cmd(i) = position_cmd - offset[i];
            joint_offset(i) = offset[i];
        }
        /**
         * TODO:
         * joint.##.risc-probe-pin-o [pincount] "Per-joint pin-id for RISC-PROBE command"; 
         * based on home-sw-id and risc-probe-type (INDEX-HOMING)
         */ 
        joint_risc_probe_type_o(i) = risc_probe_type_i;
        joint_risc_probe_vel_o(i) = risc_probe_vel_i;
        joint_risc_probe_pin_o(i) = joint_home_sw_id(i);
    }

    return 0;
}
