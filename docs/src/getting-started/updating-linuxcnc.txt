[[cha:updating-linuxcnc]] (((Updating LinuxCNC)))

= Updating LinuxCNC

This section describes how to upgrade LinuxCNC from version 2.7 to the
new version.  It assumes that you have an existing 2.7 install that you
want to update.

To upgrade LinuxCNC from a version older than 2.7, you have to first
http://linuxcnc.org/docs/2.7/html/getting-started/updating-linuxcnc.html[upgrade
your old install to 2.7], then follow these instructions to upgrade to
the new version.

If you do not have an old version of LinuxCNC to upgrade, then you're
best off making a fresh install of the new version as described in the
section <<cha:getting-linuxcnc,Getting LinuxCNC>>.


== Upgrade to the new version

The basic idea is to disable the old linuxcnc.org apt sources and add
a new linuxcnc.org apt source for 2.7, then upgrade LinuxCNC.

The details will depend on which platform you're running on.
Run `lsb_release -ic` to find this information out:

-----
> lsb_release -ic
Distributor ID: Debian
Codename:       wheezy
-----

You should be running on Debian Wheezy (as above), or Ubuntu Precise,
or Ubuntu Lucid.


=== Setting apt sources

* Open the `Software Sources` window. The process for doing this
  differs slightly on the three supported platforms:

** Debian Wheezy:

*** Click on `Applications Menu`, then `System`, then
  `Synaptic Package Manager`.

*** In Synaptic, click on the `Settings` menu, then click `Repositories`
  to open the `Software Sources` window.

** Ubuntu Precise:

*** Click on the `Dash Home` icon in the top left.

*** In the `Search` field, type "software", then click on the `Ubuntu
  Software Center` icon.

*** In the Ubuntu Software Center window, click on the `Edit` menu,
  then click on `Software Sources...` to open the `Software Sources`
  window.

** Ubuntu Lucid:

*** Click the `System` menu, then `Administration`, then
  `Synaptic Package Manager`.

*** In Synaptic, click on the `Settings` menu, then click `Repositories`
  to open the `Software Sources` window.

* In the `Software Sources` window, select the `Other Software` tab.

* Delete or un-check all the old linuxcnc.org entries (leave all
  non-linuxcnc.org lines as they are).

* Click the `Add` button and add a new apt line. The line will be
  slightly different on the different platforms:

[options="header"]
|====
| Platform       | apt source line
| Debian Wheezy  | `deb http://linuxcnc.org wheezy base 2.7-rtai`
| Ubuntu Precise | `deb http://linuxcnc.org precise base 2.7-rtai`
| Ubuntu Lucid   | `deb http://linuxcnc.org lucid base 2.7-rtai`
|====

image::images/upgrading-to-2.7.png[align="left"]

* Click `Add Source`, then `Close` in the Software Sources window.
  If it pops up a window informing you that the information about
  available software is out-of-date, click the `Reload` button.


=== Upgrading to the new version

Now your computer knows where to get the new version of the software,
next we need to install it.

The process again differs depending on your platform.

==== Debian Wheezy and Ubuntu Lucid

Debian Wheezy and Ubuntu Lucid both use the Synaptic Package Manager.

* Open Synaptic using the instructions in <<_setting_apt_sources,Setting
  apt sources>> above.

* Click the `Reload` button.

* Use the Search function to search for `linuxcnc`.

* Click the check box to mark the new linuxcnc and linuxcnc-doc-*
  packages for upgrade. The package manager may select a number of
  additional packages to be installed, to satisfy dependencies that the
  new linuxcnc package has.

* Click the `Apply` button, and let your computer install the new
  package. The old linuxcnc package will be automatically upgraded to
  the new one.


=== Ubuntu Precise

* Click on the `Dash Home` icon in the top left.

* In the `Search` field, type "update", then click on the `Update Manager`
  icon.

* Click the `Check` button to fetch the list of packages available.

* Click the `Install Updates` button to install the new versions of
  all packages.


== Updating Configuration Files

The new version of LinuxCNC differs from version 2.7 in some ways that
may require changes to your machine configuration.


=== This way

Do this.


=== That way

Do that.


=== The other way

Do the other thing.

=== Halui support for teleop jogging (Joints_axes)

Halui now supports teleop jogging resulting in some
changed pin names and numerous new names for jogging-related
pins.

    
Two pins were renamed to clarify usage (joint or axis):

      was: halui.jog-speed          is: halui.joint.jog-speed
      was: halui.jog-deadband       is: halui.joint.jog-deadband

The corresponding new pins for axis jogging are:

                                   new: halui.axis.jog-speed
                                   new: halui.axis.jog-deadband
    
All pins for joint jogging were renamed for specificity:

      was: halui.jog.N.plus         is: halui.joint.N.plus
      was: halui.jog.N.minus        is: halui.joint.N.minus
           ...  etc                     ... etc

    where N is a joint number (0 ... num_noints-1) or 'selected'
    for the joint selected by the halui.joint.N.select pins.
    
The corresponding new pins for axis jogging are:

                                   new: halui.axis.L.plus
                                   new: halui.axis.L.minus
                                        ... etc

where L is a letter corresponding to one of the axes
specified by [TRAJ]COORDINATES using an axis_mask or 'selected'
for the axis selected by the halui.axis.L.select pins.

Aditional pin renames for consistency to related pins:

      was: halui.joint.selected.is_homed
       is: halui.joint.selected.is-homed
    
      was: halui.joint.selected.on-soft-limit
       is: halui.joint.selected.on-soft-min-limit

See the man page ($ man halui) for pin names.

=== LOCKING_ROTARY_INDEXER

With JOINTS_AXES, an indexer is a joint that can be homed (joint mode)
but also must be unlocked from gcode.   Specify the joint number that
corresponds to a rotary axis (A,B, or C) with:

  [AXIS_A]LOCKING_INDEXER_JOINT = joint_number_for_indexer
  [AXIS_B]LOCKING_INDEXER_JOINT = joint_number_for_indexer
  [AXIS_C]LOCKING_INDEXER_JOINT = joint_number_for_indexer

For a machine configured as XYZABC[UVW] with trivkins identity
kinematics, the values would be:

  [AXIS_A]LOCKING_INDEXER_JOINT = 3
  [AXIS_B]LOCKING_INDEXER_JOINT = 4
  [AXIS_C]LOCKING_INDEXER_JOINT = 5

Note: trivkins assigns joints sequentially for XYZABCUVW, and 
      does not support omitted axes.

For more complex kinematics, including identity kinematics with
omitted axes, select the joint number as required -- there must
be a one-to-one correspondence between the rotary axis and the joint number.

For a machine configured as XYZB with gentrivkins identity kinematics:

  [AXIS_B]LOCKING_INDEXER_JOINT = 3

Note that gentrivkins assigns joints sequentially (starting with 0)
for each axis specified by the coordinates= parameter.  For an XYZB
config specified with:

   loadrt gentrivkins coordinates=XYZB

the assignments are:

   X-->0, Y-->1, Z-->2, B-->3

Former ini item no longer used (superseded by LOCKING_INDEXER_JOINT):

  not used: [AXIS_A]LOCKING_INDEXER = 1|0
  not used: [AXIS_B]LOCKING_INDEXER = 1|0
  not used: [AXIS_C]LOCKING_INDEXER = 1|0

The hal pins for unlocking a joint: 

   joint.N.unlock
   joint.N.is-locked

were formerly created automatically for axes A,B,C.
With separation of joints/axes functionality, these pins
must now be created for required joints using a motmod parameter:

  [EMCMOT]motmod unlock_joints_mask=MASK

For a machine configured as XYZABC[UVW] with trivkins identity kinematics:

  [EMCMOT]motmod unlock_joints_mask=0x08 (for joint 3)
  [EMCMOT]motmod unlock_joints_mask=0x10 (for joint 4)
  [EMCMOT]motmod unlock_joints_mask=0x20 (for joint 5)
  [EMCMOT]motmod unlock_joints_mask=0x38 (for joints 3, 4, and 5)

For a machine configured as XYZB with gentrivkins identity kinematics:

  [EMCMOT]motmod unlock_joints_mask=0x08 (for joint 3)

(See the motion man page ($ man motion) for more information)

A configuration with a single locking joint will have two inifile
entries.  For example XYZB machine with identity kinematics:

  [EMCMOT]motmod unlock_joints_mask = 0x10
  [AXIS_B]LOCKING_INDEXER_JOINT = 4


=== AUTO_TELEOP

The axis gui supports an option, [KINS]AUTO_TELEOP = nseconds, to cause
an automatic switch to teleop mode after homing.  The nseconds parameter
specifes the maxium time to wait after initiating homing with the
Home-All button.  The setting is applicable only for kinematics that
are not trivial (KINEMATICS_IDENTITY).

=== linuxcncrsh

The jogging commands have been altered to accomodate both joint (free)
and teleop (world) jogging.  

    was: set jog      joint_number             speed
     is: set jog      joint_number|axis_letter speed
    
    was: set jog_incr joint_number             speed increment
     is: set jog_incr joint_number|axis_letter speed increment
    
    was: set jog_stop
     is: set jog_stop joint_number|axis_letter
    
    Note: Test for teleop mode using command: get teleop_enable
          if TELEOP_ENABLE=YES, use axis_letter
          else                  use joint_number
    
    Note: Formerly, the command 'set jog 0 1.234' would jog the zeroth
    axis (X) with requested speed=1.234 in any mode (free or teleop).
    This command now attemps to jog the zeroth joint (Joint0) provided
    the mode is free (not teleop).  To jog the X axis, the mode
    must be teleop and the corresponding command is: 'set jog x 1.234'


// vim: set syntax=asciidoc:
